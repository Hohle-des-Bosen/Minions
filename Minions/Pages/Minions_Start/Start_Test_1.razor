@page "/Test"
@using Minions.Data;
@inject IDialogService Dialog
@inject ICollectionRepository<Worker> repo
@inject IRepository<Asset> assetRepo
@inject IRepository<Job> RepoJob




@if (Asset != null)
{

    <EditForm Model="this">


        <MudGrid>
            <MudItem xs="5">

                <MudTextField @bind-Value="Asset.Name"
                @bind-Value:after="SaveAsset"
                              class="form-control value-input"
                              Label="Shipname"
                              style="font-size: 25px"
                              Variant="Variant.Outlined">
                </MudTextField>

                <MudTextField @bind-Value="Asset.Type"
                @bind-Value:after="SaveAsset"
                              class="form-control value-input"
                              Label="Shipclass"
                              Variant="Variant.Outlined">
                </MudTextField>

            </MudItem>

            <MudItem xs="4">

            </MudItem>

            <MudItem>
                <MudTooltip Delay="200" Text="Fügt angegebene Tage hinzu ">
                    <MudNumericField @bind-Value="Time"
                                     class="form-control"
                                     Variant="Variant.Outlined"
                                     HideSpinButtons="true"
                                     Label="Time"
                                     Adornment="Adornment.End"
                                     AdornmentIcon="@Icons.Material.Filled.AccessTime"
                                     OnAdornmentClick="TimeButten"
                                     AdornmentColor="Color.Secondary">
                    </MudNumericField>
                </MudTooltip>

            </MudItem>



            <MudItem>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="OpenDrawer"></MudIconButton>
            </MudItem>
        </MudGrid>







        <br />
        <br />

        <MudDrawer @bind-Open="@open" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Settings</MudText>
            </MudDrawerHeader>
            <MudDrawerContainer>
                <MudNumericField @bind-Value="InPay"
                                 Variant="Variant.Outlined"
                                 HideSpinButtons="true"
                                 Label="add Money"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@Icons.Material.Filled.LocalAtm"
                                 OnAdornmentClick="GetMoney">

                </MudNumericField>


                <MudNumericField @bind-Value="Extract"
                                 Variant="Variant.Outlined"
                                 HideSpinButtons="true"
                                 Label="extract Money "
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@Icons.Material.Filled.LocalAtm"
                                 OnAdornmentClick="ExtractMoney">
                </MudNumericField>
            </MudDrawerContainer>

        </MudDrawer>

        <br />
        <br />

        <MudGrid>
            <MudItem xs="2">
                <MudCard>
                    <MudCardContent Class="border-solid border-2 mud-border pa-8">
                        <MudText Align="Align.Center" Typo="Typo.h5" Style="text-decoration:underline">Sailors</MudText>
                        <MudText Align="Align.Center" Typo="Typo.h6"> @Sailors </MudText>
                    </MudCardContent>

                </MudCard>
            </MudItem>
            <MudItem xs="2">
                <MudCard>
                    <MudCardContent Class="border-solid border-2 mud-border pa-8">

                        <MudText Align="Align.Center" Typo="Typo.h5" Style="text-decoration:underline">Rower</MudText>
                        <MudText Align="Align.Center" Typo="Typo.h6"> @Rower </MudText>

                    </MudCardContent>

                </MudCard>
            </MudItem>
            <MudItem xs="4">
                <MudCard>
                    <MudCardContent Class="border-solid border-2 mud-border pa-8">
                        <MudGrid>
                            <MudSpacer></MudSpacer>

                            <MudTooltip Text="@("Brock in "+broke.ToString()+" Days")">
                                <MudItem>
                                    <MudText Align="Align.Center" Typo="Typo.h5" Style="text-decoration:underline">Money</MudText>
                                    <MudText Align="Align.Center" Typo="Typo.h6"> @Money </MudText>
                                </MudItem>
                            </MudTooltip>


                            @*        <MudItem>
                        <MudText Align="Align.Center" Typo="Typo.h5" Style="text-decoration:underline">broke in</MudText>
                        <MudText Align="Align.Center" Typo="Typo.h6"> @broke </MudText>
                        </MudItem> *@
                            <MudSpacer></MudSpacer>
                        </MudGrid>



                    </MudCardContent>



                </MudCard>
            </MudItem>

            <MudItem xs="2">
                <MudCard>
                    <MudCardContent Class="border-solid border-2 mud-border pa-8">

                        <MudText Align="Align.Center" Typo="Typo.h6" Style="text-decoration:underline; white-space:nowrap">Crew Pyament (/Day) </MudText>
                        <MudText Align="Align.Center" Typo="Typo.h6"> @CrewPaymentDay </MudText>

                    </MudCardContent>

                </MudCard>
            </MudItem>
            <MudItem xs="2">
                <MudCard>
                    <MudCardContent Class="border-solid border-2 mud-border pa-8">

                        <MudText Align="Align.Center" Typo="Typo.h6" Style="text-decoration:underline; white-space:nowrap">Crew Curent Payment</MudText>
                        <MudText Align="Align.Center" Typo="Typo.h6"> @CrewCurentPayment </MudText>

                    </MudCardContent>

                </MudCard>
            </MudItem>

        </MudGrid>

        <br />
        <br />
        <br />
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
            <MudButton OnClick="@AddChar">Add new Crew</MudButton>
            <MudButton>Two</MudButton>
            <MudButton>Three</MudButton>
        </MudButtonGroup>



        <MudDataGrid T="Worker" Items="Liste" SortMode="SortMode.Single" Class="border-solid border-2 mud-border">
            <Columns>



                <PropertyColumn Title="Name" Property="x => x.Name">
                    <CellTemplate Context="cellContext">
                        @cellContext.Item.Name <br />
                        @cellContext.Item.Surname
                    </CellTemplate>
                </PropertyColumn>

                <PropertyColumn Title="Age" Property="x => x.Age"></PropertyColumn>
                <PropertyColumn Title="Race" Property="x => x.Race"></PropertyColumn>
                <PropertyColumn Title="Sex" Property="x => x.Sex"></PropertyColumn>
                <PropertyColumn Title="Job" Property="x => x.Job"></PropertyColumn>
                <PropertyColumn Title="Payment(/Day)" Property="x => x.Payment"></PropertyColumn>
                <PropertyColumn Title="Days without pay" Property="x => x.DayWihtoutPay"></PropertyColumn>
                <PropertyColumn Title="Current Payment" Property="x => x.CurrentPayment"></PropertyColumn>

                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate Context="cellContext">
                        <MudStack Row>
                         <MudButton OnClick="@(()=>Pay(cellContext.Item))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Success">Pay</MudButton>
                         <MudButton OnClick="@(()=>Fire(cellContext.Item))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error">Fire</MudButton>
                         <MudIconButton OnClick="@(()=>CharacterSheet(cellContext.Item))" Icon="@Icons.Material.Filled.Build" Size="Size.Small" aria-label="delete"></MudIconButton>
                     </MudStack>
                 </CellTemplate>
             </TemplateColumn>
         </Columns>
     </MudDataGrid>




 </EditForm>

}

















@code {
    // This is just for now, later this will be changed
    public string AssetId { get; set; } = "Test";
    public Asset? Asset { get; set; }
    public List<Job> Jobs { get; set; }

    public double Money { get; set; }
    public string? Shipname { get; set; }
    public string? ShipClass { get; set; }
    public int Time { get; set; } = 1;
    public double InPay { get; set; }
    public double Extract { get; set; }
    public int broke => (int)Double.Floor((Money - CrewCurentPayment) / CrewPaymentDay);

    public int Sailors => Liste?.Count(x => x.Job?.Name != "Rower") ?? 0;
    public int Rower => Liste?.Count(x => x.Job?.Name == "Rower") ?? 0;
    public double CrewPaymentDay => Liste?.Sum(X => X.Payment) ?? 0;
    public double CrewCurentPayment => Liste?.Sum(x => x.CurrentPayment) ?? 0;
    bool open;




    private List<Worker>? Liste { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!assetRepo.Exists(AssetId))
        {
            var newAsset = new Asset()
                {
                    Id = AssetId
                };
            await assetRepo.Save(newAsset);
        }
        Asset = await assetRepo.Get(AssetId);
        repo.SetCollectionId(AssetId);
        Liste = (await repo.GetAll()).ToList();
        Jobs = (await RepoJob.GetAll()).ToList();

        if (Liste.Count == 0)
        {
            await repo.Save(new Worker
                {

                    Name = "Test",
                    Age = 12,
                    Race = Race.Nekomata,
                    Sex = Sex.Female,
                    Payment = 30,
                    Job = Jobs.FirstOrDefault(),

                });
            await repo.Save(new Worker
                {
                    Name = "Igor",
                    Age = 50,
                    Race = Race.Dragonborn,
                    Sex = Sex.Male,
                    Payment = 50,
                    Job = Jobs.FirstOrDefault(),
                });
            Liste = (await repo.GetAll()).ToList();




        }
    }





    public async Task TimeButten()
    {



        foreach (var item in Liste)
        {
            item.DayWihtoutPay = item.DayWihtoutPay + Time;
            item.TimeOnBord = item.TimeOnBord + Time;
            item.CurrentPayment = item.CurrentPayment + (item.Payment * Time);

            await repo.Save(item);
        }
        Time = 1;
    }
    public async Task AddChar()
    {
        var options = new DialogOptions()
            {
                CloseButton = true
            };

        var parameter = new DialogParameters<AddCrewDialog>();
        var element = new Worker();
        parameter.Add(x => x.Element, element);
        var dialog = await Dialog.ShowAsync<AddCrewDialog>("AddCrew", parameter, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {

            element.TimeOnBord = element.DayWihtoutPay;

            Liste.Add(element);
            await repo.Save(element);
        }




    }
    private async Task CharacterSheet(Worker element)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameter = new DialogParameters<CharacterSheet>();


        parameter.Add(x => x.Element, element);


        var dialog = await Dialog.ShowAsync<CharacterSheet>("CharacterSheet", parameter, options);
        var result = await dialog.Result;
    }
    public void Fire(Worker element)
    {
        Liste.Remove(element);
        repo.Delete(element.Id);

    }
    public async Task Pay(Worker element)
    {

        Money = Money - element.CurrentPayment;
        element.DayWihtoutPay = 0;
        element.CurrentPayment = 0;
        await repo.Save(element);


    }
    public void GetMoney()
    {
        Money = Money + InPay;
        InPay = 0;

    }
    public void ExtractMoney()
    {
        Money = Money - Extract;
        Extract = 0;

    }
    public async Task SaveAsset()
    {
        if (Asset == null)
        {
            return;
        }
        await assetRepo.Save(Asset);
    }
    void OpenDrawer()
    {
        open = true;

    }

}
<!--
    Anzeigen Arbeits Tage (Tracking der arbeitstage der einzelnen arbeite berücksichtigung fon enderungen (z.b. For anka))

    Anzeige Gelt (Algemeine Daten Über schiff Mit Finanzen und Status (Art; Name; Semener; Ruderer; Tägliche Bezalung; Gesamt Auszalung;  ))

    Anzeigen Personal (Namme;Alta;Rasse;Geschlecht/Namentlich oder Nicht z.b. Ruderer)---
    Anzeige Zeitarbeiter (Schneles ein und austagen fon No name Cruw)

    Knopf Einzelnes Crow Mitgliet austalen
    Knopf Gesamte Crow Auszalen
    Knopf Roderer Geamt auszalen
    Knopf Einzelner Ruderer auszalen
    Knopf Nexter tag (eingebare Tages anzal)


    Anzeigen Persönliche Daten (Beckraund)
    Anzeigen Gehalt (Algemeine Gehaltz übersicht mit automatischer anpasung und auszalung)
    Anzeigen Inventar (Algemeine austatung (Besondere austatungen z.b. Magische gegenstende)
    Anzeigen Category Beruf (Algemeine Qualifickazion)

    Rang System
--!>
