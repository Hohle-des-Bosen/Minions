 @inject IRepository<Asset> Repo
 @inject AssetService AssetService
@inject IDialogService Dialog
@inject PersistenceService PersistenceService
@implements IDisposable

 @page "/"
 @page "/{AssetId}/worker"
 

<SectionContent SectionName="SectionName.InHeader">
    <MudTextField Label="Hello World" Value="Asset.UnnamedRower.ToString()"></MudTextField>
    <MudSpacer />
    <MudText>Schiffs Klasse</MudText>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.MoreTime" OnClick="@Time" />
</SectionContent>

<div class="general">

    <HeaderItem Header="Rower"
                SmallContentTitle="Number of Rowers"
                SmallContent="@(Asset.UnnamedRower.ToString())"
                AddContent="@(async (count) => await AddUnnamedRower(count))"
                AddFooterLeft="@(async (payment) => await AddUnnamedRowerPayment(payment))"
                ContentTitle="Number of Asset.Rowers  (including those with names)"
                Content="@(Asset.Rower.ToString())"
                ContentLeftTitle="Payment of one Asset.Rower"
                ContentLeft="@(Asset.UnnamedRowerPayment.ToString())"
                ContentRightTitle="Sum of costs of all Asset.Rowers"
                ContentRight="@(Asset.SumOfCostsOfAllRowers.ToString())">
    </HeaderItem>
    <HeaderItem Header="Sailor"
                SmallContentTitle="Number of Sailors"
                SmallContent="@(Asset.UnnamedSailor.ToString())"
                AddContent="@(async (count) => await AddUnnamedSailor(count))"
                AddFooterLeft="@(async (payment) => await AddUnnamedSailorPayment(payment))"
                ContentTitle="Number of Sailors (including those with names)"
                Content="@(Asset.Sailors.ToString())"
                ContentLeftTitle="Payment of Sailors"
                ContentLeft="@(Asset.UnnamedSailorsPayment.ToString())"
                ContentRightTitle="Sum of all Sailor Costs"
                ContentRight="@(Asset.SumOfAllSailorCosts.ToString())">
    </HeaderItem>
    <HeaderItem Header="Money"
                Content="@(Asset.Money.ToString())"
                AddContent="@(async (money) => await AddMoney(money))"
                ContentRight="@(Broke.ToString())">
    </HeaderItem>
    <HeaderItem Header="Payment"
                Content="@(Payment.ToString())">
    </HeaderItem>
    <HeaderItem Header="Current Payment"
                Content="@(CurrentPayment.ToString())">
    </HeaderItem>

</div>

<DisplayBlock Definition="null"></DisplayBlock>

@if (IsDebug)
{
    @if (Asset.DisplayBlocks != null)
    {
        @foreach (var block in Asset.DisplayBlocks)
        {
            <DisplayBlock Definition="block"></DisplayBlock>
        }

    }
    @* This is very bad code! Just for Testing!! *@
    <button @onclick="@(() => {
    Asset.DisplayBlocks ??= new List<DisplayBlockDefinition>();
    Asset.DisplayBlocks.Add(new DisplayBlockDefinition() {
        Name = "Test",
        Type = DisplayBlockDefinitionType.None
    });
    StateHasChanged();
})">
        Add Test-Elemenet
    </button>
}

<br />

<MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Worker List">

        <MudDataGrid T="Worker" Items="Asset.Workers" SortMode="SortMode.Single" Class="border-solid border mud-border" ColumnsPanelReordering="true" ShowMenuIcon="true"
                     Hideable="true" Filterable="true" Groupable="true">
            <Columns>



                <PropertyColumn Title="Name" Property="x => x.Name" @bind-Hidden="ColumnPersistence.Name">
                    <CellTemplate Context="cellContext">
                        @if (!string.IsNullOrEmpty(cellContext.Item.ExternalLink))
                        {
                            <a href="@cellContext.Item.ExternalLink">
                                @cellContext.Item.Name <br />
                                @cellContext.Item.Surname

                                <MudIcon Icon="@Icons.Material.Filled.Link" Size="Size.Small"></MudIcon>
                            </a>
                        } else
                        {
                            @cellContext.Item.Name <br />
                            @cellContext.Item.Surname
                        }
                    </CellTemplate>


                    <FooterTemplate>
                        <MudGrid>
                            <MudItem>
                                <MudIconButton OnClick="@AddChar" Icon="@Icons.Material.Filled.Add"></MudIconButton>

                            </MudItem>
                            <MudItem>
                                <MudText>NEW Char</MudText>
                            </MudItem>
                        </MudGrid>



                    </FooterTemplate>
                </PropertyColumn>

                <TemplateColumn @bind-Hidden="ColumnPersistence.Image">
                    <CellTemplate Context="cellContext">
                        @if (cellContext.Item.ImageUri != null)
                        {
                            <img src="@(cellContext.Item.ImageUri)" class="preview-image" />
                        } else
                        {
                            <div class="img-placeholder"></div>
                        }
                    </CellTemplate>
                </TemplateColumn>

                <PropertyColumn Title="Age" Property="x => x.Age" @bind-Hidden="ColumnPersistence.Age"></PropertyColumn>
                <PropertyColumn Title="Race" Property="x => x.Race" @bind-Hidden="ColumnPersistence.Race"></PropertyColumn>
                <PropertyColumn Title="Sex" Property="x => x.Sex" @bind-Hidden="ColumnPersistence.Sex"></PropertyColumn>
                <PropertyColumn Title="Job" Property="x => x.Job" @bind-Hidden="ColumnPersistence.Job"></PropertyColumn>

                <PropertyColumn Title="ServiceStarted" Property="x => x.ServiceStarted" @bind-Hidden="ColumnPersistence.ServiceStarted"></PropertyColumn>
                <PropertyColumn Title="ServiceEnded" Property="x => x.ServiceEnded" @bind-Hidden="ColumnPersistence.ServiceEnded"></PropertyColumn>

                <PropertyColumn Title="TimeOnBord" Property="x => x.TimeOnBord" @bind-Hidden="ColumnPersistence.TimeOnBoard"></PropertyColumn>

                <PropertyColumn Title="Payment(/Day)" Property="x => x.Payment" @bind-Hidden="ColumnPersistence.Payment"></PropertyColumn>
                <PropertyColumn Title="Days without pay" Property="x => x.DayWithoutPay" @bind-Hidden="ColumnPersistence.DaysWithoutPay"></PropertyColumn>
                <PropertyColumn Title="Current Payment" Property="x => x.CurrentPayment" @bind-Hidden="ColumnPersistence.CurrentPayment"></PropertyColumn>
                <PropertyColumn Title="Condition" Property="x => x.Condition" @bind-Hidden="ColumnPersistence.Condition"></PropertyColumn>

                <TemplateColumn CellClass="d-flex justify-end" @bind-Hidden="ColumnPersistence.Menu">
                    <CellTemplate Context="cellContext">
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                            <MudMenuItem OnClick="@(()=>Pay(cellContext.Item))">Pay</MudMenuItem>
                            <MudMenuItem OnClick="@(()=>Fire(cellContext.Item))">Fire</MudMenuItem>
                            <MudMenuItem OnClick="@(()=> EditChar(cellContext.Item))">Character Sheet </MudMenuItem>
                            <MudSwitch Label="Info" Color="Color.Info" />
                        </MudMenu>

                    </CellTemplate>
                </TemplateColumn>



            </Columns>
        </MudDataGrid>

    </MudTabPanel>
    <MudTabPanel Text="Finance">
        <MudText>Content Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Asset">
        <MudText>Content Three</MudText>
    </MudTabPanel>

</MudTabs>




