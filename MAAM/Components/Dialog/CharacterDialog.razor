  @inject IRepository<Race> RaceRepo
  @inject IRepository<Job> JobRepo


<MudDialog>








    <DialogContent>

        <MudTextField @bind-Value="Element.Name" T="string" Label="Name" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="Element.Surname" T="string" Label="Sure Name" Variant="Variant.Outlined"></MudTextField>



        <MudSelect @bind-Value="Element.Race" T="string" Label="Race" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

            @foreach (Race item in RaceOptions)
            {
                <MudSelectItem Value="@item.Name">@item.Name</MudSelectItem>
            }
        </MudSelect>

 
            <BlazoredTypeahead  placeholder="Job" SearchMethod="@SearchJob"
                               @bind-Value="SelectedJob"
                               Debounce="500"
                               AddItemOnEmptyResultMethod="@AddJob">
                <SelectedTemplate>
                    @context?.Id
                </SelectedTemplate>
                <ResultTemplate>
                    @context?.Id
                </ResultTemplate>
                <NotFoundTemplate>
                    @context (New Item)
                </NotFoundTemplate>
            </BlazoredTypeahead>

@*         <MudFileUpload T="IBrowserFile" FilesChanged="HandleFileChange">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload">
                    Upload Files
                </MudButton>
            </ActivatorContent>
        </MudFileUpload> *@

    @*     <MudField>
        <InputFile class="form-control" OnChange="HandleFileChange"></InputFile>
        </MudField> *@

        <MudGrid>
            <MudItem xs="6">
                <MudNumericField @bind-Value="Element.Age" T="int" HideSpinButtons="true" Label="Age" Variant="Variant.Outlined"></MudNumericField>
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value="Element.Sex" T="Sex" Label="Sex" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                    @foreach (Sex item in Enum.GetValues(typeof(Sex)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value="Element.ServiceStarted" T="string" HideSpinButtons="true" Label="ServiceStarted" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="Element.ServiceEnded" T="string" HideSpinButtons="true" Label="ServiceEnded" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="4">
                <MudNumericField @bind-Value="Element.TimeOnBord" T="int" HideSpinButtons="true" Label="TimeOnBord" Variant="Variant.Outlined"></MudNumericField>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="Element.Payment" T="double" HideSpinButtons="true" Label="Payment" Variant="Variant.Outlined"></MudNumericField>
            </MudItem>
            <MudItem xs="4">
                <MudNumericField @bind-Value="Element.DayWithoutPay" T="int" HideSpinButtons="true" Label="Days without pay" Variant="Variant.Outlined"></MudNumericField>
            </MudItem>
        </MudGrid>





    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>



</MudDialog>















@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Worker Element { get; set; }
    public List<Race> RaceOptions { get; set; } = new List<Race>();

    private Job? _selectedJob;
    public Job? SelectedJob
    {
        get => _selectedJob;
        set
        {
            this._selectedJob = value;
            if (Element != null)
            {
                Element.Job = _selectedJob?.Id;
            }
        }
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        RaceOptions = (await RaceRepo.GetAll()).OrderBy(x => x.Name).ToList();
        _selectedJob = string.IsNullOrEmpty(Element.Job)
            ? null
            : await JobRepo.Get(Element.Job);

        await base.OnInitializedAsync();
    }

    public async Task<IEnumerable<Job>> SearchJob(string name)
    {
        var data = await JobRepo.GetAll();
        return data.Where(job => job.Id.Contains(name, StringComparison.OrdinalIgnoreCase));
    }

    public async Task<Job> AddJob(string name)
    {
        var newJob = new Job()
            {
                Id = name
            };
        await JobRepo.Save(newJob);

        return newJob;
    }


    async Task HandleFileChange(InputFileChangeEventArgs args)
    {
        if (args == null || args.FileCount == 0)
        {
            return;
        }

        var file = args.File;
        using var stream = file.OpenReadStream();

        byte[] result = new byte[file.Size];
        await stream.ReadAsync(result);

        var sb = new System.Text.StringBuilder();
        sb.Append("data:").Append(file.ContentType).Append(";base64,")
            .Append(Convert.ToBase64String(result));


        Element.Image = sb.ToString();
    }
}
