@page "/Job"
@using Minions.Components.Pages.Dialog;
@inject IDialogService Dialog
@inject IRepository<Job> repo


<h3>Jobs</h3>



<MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
    <MudButton OnClick="@AddJobs">Add new Job</MudButton>
</MudButtonGroup>

<MudDataGrid T="Job" Items="Liste" SortMode="SortMode.Single" Class="border-solid border-2 mud-border">
    <Columns>
        <PropertyColumn Title="Name" Property="x => x.Name"></PropertyColumn>
        <PropertyColumn Title="Description" Property="x => x.Description"></PropertyColumn>
        <PropertyColumn Title="Payment" Property="x => x.Payment"></PropertyColumn>
        <PropertyColumn Title="Requirement" Property="x => x.Requirement"></PropertyColumn>
       


        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate Context="cellContext">
                <MudStack Row>

                    <MudButton OnClick="@(()=>Remove (cellContext.Item))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error">Remove</MudButton> 
                    <MudIconButton OnClick="@(()=>EditJob(cellContext.Item))" Icon="@Icons.Material.Filled.Build" Size="Size.Small" aria-label="delete"></MudIconButton>
                    @* <MudIconButton OnClick="@(()=>Eddite (cellContext.Item))" Icon="@Icons.Material.Filled.Build" Size="Size.Small" aria-label="delete"></MudIconButton> *@
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>









@code {
    public List<Job>? Liste { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Liste = (await repo.GetAll()).ToList();

        if (Liste.Count == 0)
        {
            await repo.Save(new Job
                {
                    Name = "Kartzenhüter",
                    Description = "Wacht Über Kätzechen",
                    Payment = 5,
                    Requirement = "Katzenlibhaber",
                });
            Liste = (await repo.GetAll()).ToList();

        }
    }

    private async Task EditJob(Job element)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, };
        var parameter = new DialogParameters<EditJob>();


        parameter.Add(x => x.Element, element);


        var dialog = await Dialog.ShowAsync<EditJob>("CharacterSheet", parameter, options);
        var result = await dialog.Result;
        await repo.Save(element);
    }




    public void Remove(Job remove)
    {
        Liste.Remove(remove);
        repo.Delete(remove.Id);

    }

    public async Task AddJobs()
    {
        var options = new DialogOptions()
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                
            };

        var parameter = new DialogParameters<AddJob>();
        var element = new Job();
        parameter.Add(x => x.Job, element);


        var dialog = await Dialog.ShowAsync<AddJob>("AddJob", parameter, options);
        var result = await dialog.Result;


        if (!result.Canceled)
        {



            Liste.Add(element);
            await repo.Save(element);
        }




    }
}
