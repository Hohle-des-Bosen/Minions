@using Minions.Data;
@inject IRepository<Job> RepoJob;


@*
    Tages

    Freundlich;     @Icons.Material.Filled.InsertEmoticon
    Böse;            @Icons.Material.Filled.LocalFireDepartment
    Gut;             @Icons.Material.Filled.Favorite
    Agresif;        @Icons.Material.Filled.Bolt;@Icons.Material.Filled.Thunderstorm
    Kampffäig;      @Icons.Material.Filled.SportsMma
    Faul;            @Icons.Material.Filled.LocalHotel
    Fleisig;        @Icons.Material.Filled.DirectionsRun
    Girig;          @Icons.Material.Filled.Savings
    Schleimer;      @Icons.Material.Filled.CleanHands
    Sexsistisch;    @Icons.Material.Filled.CrueltyFree
    unnachgibig;    @Icons.Material.Filled.Castle
    Creeatif;       @Icons.Material.Filled.Create
    Tierfreunt;     @Icons.Material.Filled.Pets
    Jobs

    Ruderer; @Icons.Material.Filled.Rowing


    Mänlich;@Icons.Material.Filled.Male
    Weiblich;@Icons.Material.Filled.Female


    Semman; Zimmerer; Soldat; Ruderer; Koch; Artzt; Magier; Prister; Musicker; Erster/Zweiert/Waffen/ Offizier; Auskuck;
*@




<MudDialog>
   
    <DialogContent>
        @if (Element != null)
        {
            <MudGrid>
                <MudItem>
                    <MudText Typo="Typo.h6">New Crew</MudText>
                </MudItem>
            </MudGrid>

              <br />
            <br />

            <MudGrid>


                <MudItem xs="6">

                    <MudStack Row>
                     <MudTextField @bind-Value="Element.Name" Label="Name" Variant="Variant.Outlined" />
                     <MudTextField @bind-Value="Element.Surname" Label="Surname" Variant="Variant.Outlined" />
                 </MudStack>

                 <MudNumericField @bind-Value="Element.Age" Label="Age" Variant="Variant.Outlined" />
             </MudItem>
             <MudItem xs="6">
                 <MudSelect @bind-Value="Element.Race" T="Race" Label="Race" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                     @foreach (Race item in Enum.GetValues(typeof(Race)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect @bind-Value="Element.Sex" T="Sex" Label="Sex" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                        @foreach (Sex item in Enum.GetValues(typeof(Sex)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField @bind-Value="Element.Payment" Label="Payment" Variant="Variant.Outlined" />

                    <MudSelect @bind-Value="Element.Job" T="Job" Label="Job" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                        @foreach (Job item in Jobs)
                        {

                            <MudTooltip Value="@item"
                                        Text="@item.Requirement"
                                        Arrow="true"
                                        Placement="Placement.Bottom"
                                        Class="onTop">

                                <MudSelectItem Value="@item">@item.Name</MudSelectItem>

                            </MudTooltip>

                        }
                    </MudSelect>



                </MudItem>
                <MudItem xs="6">
                    <MudNumericField @bind-Value="Element.DayWithoutPay" Label="DayWihtoutPay" Variant="Variant.Outlined" />
                    <MudTextField @bind-Value="Element.Name" Label="Name" Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>


        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>

    </DialogActions>
</MudDialog>







@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Worker Element { get; set; }
    public List<Job> Jobs { get; set; } = new List<Job>();







    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Jobs = (await RepoJob.GetAll()).ToList();

    }




    private void Cancel()
    {
        MudDialog.Cancel();
    }
   


}
